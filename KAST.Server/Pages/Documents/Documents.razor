@page "/pages/documents"

@using BlazorDownloadFile
@using KAST.Application.Common.Interfaces.MultiTenant
@using KAST.Application.Features.Documents.Commands.Delete
@using KAST.Application.Features.Documents.DTOs
@using KAST.Application.Features.Documents.Commands.AddEdit
@using KAST.Application.Features.Documents.Queries.PaginationQuery

@inject IJSRuntime JS
@inject IStringLocalizer<Documents> L
@attribute [Authorize(Policy = Permissions.Documents.View)]
<PageTitle>@Title</PageTitle>
<style>
    .mud-table-toolbar {
        height: 84px !important;
    }
</style>
<ErrorBoundary>
    <ChildContent>

        <MudTable ServerData="@(new Func<TableState, Task<TableData<DocumentDto>>>(ServerReload))"
                  FixedHeader="true"
                  FixedFooter="true"
                  Virtualize="true"
                  @bind-RowsPerPage="_defaultPageSize"
                  Height="calc(100vh - 330px)"
                  Loading="@_loading"
                  SortLabel="@PromptText.ORDERBY"
                  MultiSelection="true"
                  @bind-SelectedItems="_selectedItems"
                  Hover="true" @ref="_table">
            <ToolBarContent>
                <div class="justify-start pt-3">
                    <MudText Typo="Typo.h6">@L["Documents"]</MudText>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudButton DisableElevation Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="@(()=>OnRefresh())"
                                   StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                                   Style="margin-right: 4px; margin-bottom:4px">@ButtonText.REFRESH</MudButton>
                        @if (_canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Size="Size.Small"
                                   Disabled="@_loading"
                                   OnClick="OnCreate"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   IconColor="Color.Surface">@ButtonText.CREATE</MudButton>
                        }
                        @if (_canDelete)
                        {
                            <MudButton DisableElevation Variant="Variant.Outlined" Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Delete"
                                   Disabled="@(!(_selectedItems.Count>0))"
                                   Size="Size.Small"
                                   Style="margin-right: 4px; margin-bottom:4px"
                                   OnClick="OnDeleteChecked"
                                   IconColor="Color.Surface">@ButtonText.DELETE</MudButton>
                        }


                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                        <MudMenu AnchorOrigin="Origin.BottomLeft" StartIcon="@Icons.Filled.KeyboardCommandKey" EndIcon="@Icons.Filled.KeyboardArrowDown" Label="@L["Action"]" Color="Color.Primary" Variant="Variant.Filled">
                            <MudMenuItem Disabled="@_loading" OnClick="@(()=>OnRefresh())">@ButtonText.REFRESH</MudMenuItem>
                            @if (_canCreate)
                            {
                                <MudMenuItem Disabled="@_loading" OnClick="OnCreate">@ButtonText.CREATE</MudMenuItem>
                            }
                            @if (_canDelete)
                            {
                                <MudMenuItem OnClick="OnDeleteChecked">@ButtonText.DELETE</MudMenuItem>
                            }

                        </MudMenu>
                    </MudHidden>
                </div>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Value="@_searchString" Placeholder="@PromptText.SEARCH" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <ColGroup>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <col style="width:48px;" />
                    <col style="width:118px;" />
                    <col style="width:50%;" />
                    <col style="width:100px;" />
                    <col style="width:120px;" />
                </MudHidden>
            </ColGroup>
            <HeaderContent>
                <MudTh>@PromptText.ACTIONS</MudTh>
                <MudTh><MudTableSortLabel SortLabel="Title" T="DocumentDto">@L["Title"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="DocumentType" T="DocumentDto">@L["Document Type"]</MudTableSortLabel></MudTh>
                <MudTh Style="text-align:right"><MudTableSortLabel SortLabel="IsPublic" T="DocumentDto">@L["Is Public"]</MudTableSortLabel></MudTh>
                <MudTh>@L["Tenant Name"]</MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@ButtonText.ACTIONS">
                    @if (_canEdit || _canDelete || _canDownload)
                    {
                        <MudMenu Label="@ButtonText.ACTIONS" Variant="Variant.Filled" DisableElevation="true" Size="Size.Small"
                             Dense="true"
                             EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Info" Direction="Direction.Left"
                             OffsetX="true">
                            @if (_canEdit)
                            {
                                <MudMenuItem OnClick="@(()=>OnEdit(context))">@ButtonText.EDIT</MudMenuItem>
                            }
                            @if (_canDelete)
                            {
                                <MudMenuItem OnClick="@(()=>OnDelete(context))">@ButtonText.DELETE</MudMenuItem>
                            }
                            @if (_canDownload)
                            {
                                <MudMenuItem Disabled="@_downloading" OnClick="@(()=>OnDownload(context))">@ButtonText.DOWNLOAD</MudMenuItem>
                            }
                        </MudMenu>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" DisableElevation="true"
                               StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                               Color="Color.Surface">
                            @ButtonText.NOALLOWED
                        </MudButton>
                    }
                </MudTd>

                <MudTd DataLabel="@L["Title"]">
                    <div class="d-flex flex-column">
                        <MudText>@context.Title</MudText>
                        <MudText Typo="Typo.body2">@context.Description</MudText>
                    </div>
                </MudTd>
                <MudTd HideSmall="true" DataLabel="@L["Document Type"]">@context.DocumentType</MudTd>
                <MudTd DataLabel="@L["Is Public"]" Style="text-align:right">
                    <MudCheckBox Checked="@context.IsPublic" Disabled="true"></MudCheckBox>
                </MudTd>
                <MudTd DataLabel="@L["Tenant Name"]">
                    <div class="d-flex flex-column">
                        <MudText>@context.TenantName</MudText>
                        <MudText Typo="Typo.body2">@context.TenantId</MudText>
                    </div>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>@PromptText.NOMACHING</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>@PromptText.LOADING</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager PageSizeOptions="@(new int[]{10,15,30,50,100,500,1000})" />
            </PagerContent>
        </MudTable>
    </ChildContent>
    <ErrorContent>
        <CustomError Exception="context"></CustomError>
    </ErrorContent>
</ErrorBoundary>
@code {
    public string? Title { get; private set; }
    private HashSet<DocumentDto> _selectedItems = new HashSet<DocumentDto>();
    private MudTable<DocumentDto> _table = default!;
    private int _defaultPageSize = 15;
    private string _searchString = string.Empty;
    private bool _downloading = false;
    private bool _loading;
    [Inject]
    private ITenantProvider _tenantProvider { get; set; } = default!;
    [Inject]
    IBlazorDownloadFileService BlazorDownloadFileService { get; set; } = null!;
    [Inject]
    private ISender _mediator { get; set; } = default!;
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; } = default!;
    private string _tenantId = string.Empty;
    private DocumentsWithPaginationQuery _query { get; set; } = new(string.Empty);

    private bool _canSearch;
    private bool _canCreate;
    private bool _canEdit;
    private bool _canDelete;
    private bool _canImport;
    private bool _canExport;
    private bool _canDownload;
    protected override async Task OnInitializedAsync()
    {
        Title = L["Documents"];
        var state = await _authState;
        _canCreate = (await AuthService.AuthorizeAsync(state.User, Permissions.Documents.Create)).Succeeded;
        _canSearch = (await AuthService.AuthorizeAsync(state.User, Permissions.Documents.Search)).Succeeded;
        _canEdit = (await AuthService.AuthorizeAsync(state.User, Permissions.Documents.Edit)).Succeeded;
        _canDelete = (await AuthService.AuthorizeAsync(state.User, Permissions.Documents.Delete)).Succeeded;
        _canImport = (await AuthService.AuthorizeAsync(state.User, Permissions.Documents.Import)).Succeeded;
        _canExport = (await AuthService.AuthorizeAsync(state.User, Permissions.Documents.Export)).Succeeded;
        _canDownload = (await AuthService.AuthorizeAsync(state.User, Permissions.Documents.Download)).Succeeded;
        _tenantId = await _tenantProvider.GetTenantId();
        _tenantProvider.Register(async () =>
        {
            await _table.ReloadServerData();
        });
    }
    private async Task<TableData<DocumentDto>> ServerReload(TableState state)
    {
        try
        {
            _loading = true;
            _query.Keyword = _searchString;
            _query.TenantId = _tenantId;
            _query.OrderBy = string.IsNullOrEmpty(state.SortLabel) ? "Id" : state.SortLabel;
            _query.SortDirection = (state.SortDirection == SortDirection.None ? SortDirection.Descending.ToString() : state.SortDirection.ToString());
            _query.PageNumber = state.Page + 1;
            _query.PageSize = state.PageSize;
            var result = await _mediator.Send(_query).ConfigureAwait(false);
            return new TableData<DocumentDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }

    }

    private void OnFilterChanged(string s)
    {
        InvokeAsync(async () =>
        {
            await _table.ReloadServerData();
        });
    }
    private async Task OnSearch(string text)
    {
        _selectedItems = new();
        _searchString = text;
        await _table.ReloadServerData();
    }
    private async Task OnRefresh()
    {
        _selectedItems = new();
        _searchString = string.Empty;
        await _table.ReloadServerData();
    }
    private async Task OnCreate()
    {
        var command = new AddEditDocumentCommand() { DocumentType = DocumentType.Document };
        var parameters = new DialogParameters
            {
        { nameof(_DocumentFormDialog.model),command },
            };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_DocumentFormDialog>
        (string.Format(PromptText.CREATEAITEM, L["Document"]), parameters, options);
        var state = await dialog.Result;
        if (!state.Cancelled)
        {
            var result = await _mediator.Send(command);
            await _table.ReloadServerData();
            Snackbar.Add($"{ToastText.CREATESUCCESS}", MudBlazor.Severity.Info);
        }
    }
    private async Task OnEdit(DocumentDto dto)
    {
        var command = new AddEditDocumentCommand()
            {
                Id = dto.Id,
                Title = dto.Title,
                URL = dto.URL,
                Description = dto.Description,
                DocumentType = dto.DocumentType,
                IsPublic = dto.IsPublic,
                TenantId = dto.TenantId,
                TenantName = dto.TenantName
            };
        var parameters = new DialogParameters
                {
                 { nameof(_DocumentFormDialog.model),command },
                };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<_DocumentFormDialog>
        (string.Format(PromptText.EDITTHEITEM, L["Document"]), parameters, options);
        var state = await dialog.Result;
        if (!state.Cancelled)
        {
            var result = await _mediator.Send(command);
            await _table.ReloadServerData();
            Snackbar.Add($"{ToastText.SAVESUCCESS}", MudBlazor.Severity.Info);
        }
    }

    private async Task OnDelete(DocumentDto dto)
    {
        var parameters = new DialogParameters
                    {
                { nameof(DeleteConfirmation.ContentText), string.Format(PromptText.DELETECONFIRMATION, dto.Title) }
                    };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>(string.Format(PromptText.EDITTHEITEM, L["Document"]), parameters, options);
        var state = await dialog.Result;
        if (!state.Cancelled)
        {
            var command = new DeleteDocumentCommand(new int[] { dto.Id });
            var result = await _mediator.Send(command);
            await _table.ReloadServerData();
            Snackbar.Add($"{ToastText.DELETESUCCESS}", MudBlazor.Severity.Info);
        }
    }

    private async Task OnDeleteChecked()
    {
        var parameters = new DialogParameters
                        {
                    { nameof(DeleteConfirmation.ContentText), string.Format(PromptText.DELETECONFIRMWITHSELECTED,_selectedItems.Count) }
                        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteConfirmation>
        (string.Format(PromptText.DELETETHEITEM, L["Document"]), parameters, options);
        var state = await dialog.Result;
        if (!state.Cancelled)
        {
            var command = new DeleteDocumentCommand(_selectedItems.Select(x => x.Id).ToArray());
            var result = await _mediator.Send(command);
            await _table.ReloadServerData();
            Snackbar.Add($"{ToastText.DELETESUCCESS}", MudBlazor.Severity.Info);
            _selectedItems = new HashSet<DocumentDto>
            ();
        }
    }
    private async Task OnDownload(DocumentDto dto)
    {

        try
        {
            _downloading = true;
            var file = await _mediator.Send(new GetFileStreamQuery(dto.Id));
            if (file.Item2 != null)
            {
                var result = await BlazorDownloadFileService.DownloadFile(file.Item1, file.Item2, "application/octet-stream");
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"{e.Message}", MudBlazor.Severity.Error);
        }
        finally
        {
            _downloading = false;
        }
    }

    }
