@page "/settings"
@using KAST.Core.Services;
@inject SettingsService SettingsService
@inject ISnackbar Snackbar

<PageTitle>Settings</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Settings</MudText>
@if (ColorPrimary == null)
{
    <MudProgressCircular Color="MudBlazor.Color.Default" Indeterminate="true" />
}
else
{
    <MudText Class="mb-8">These settings are just for demo purposes and are non-functionnal.</MudText>
    <MudSwitch @bind-Checked="@UseDarkTheme" Color="MudBlazor.Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode" />
    <MudColorPicker Label="Primary Color" @bind-Text="ColorPrimary" Style="@($"color: {ColorPrimary};")" Placeholder="Primary Color" />
}


@code {

    private bool UseDarkTheme 
    { 
        get => SettingsService.Theme.DarkTheme; 
        set { SettingsService.Theme.DarkTheme = value; SettingsService.Save(); StateHasChanged(); }
    }

    private string ColorPrimary
    {
        get => SettingsService.Theme.PalettePrimary;
        set { SettingsService.Theme.PalettePrimary = value; SettingsService.Save(); StateHasChanged(); }
    }


    protected override async Task OnInitializedAsync()
    { }
}
