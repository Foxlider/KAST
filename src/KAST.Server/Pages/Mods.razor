@page "/mods"
@using KAST.Data.Enums;
@using KAST.Data.Models;
@using KAST.Core.Services;
@using KAST.Server.Data;
@inject ModsService ModsService
@inject SteamService SteamService
@inject ISnackbar Snackbar

<PageTitle>Mods</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Mods</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>
@if (localMods == null || steamMods == null)
{
    <MudProgressCircular Color="MudBlazor.Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="steamMods" Hover="true" FixedHeader="true" SortLabel="Sort By" Elevation="0">
        <ColGroup>
            <col style="width: 5%;" />
            <col style="width: 10%;" />
            <col />
            <col style="width: 10%;" />
            <col style="width: 15%;" />
            <col style="width: 15%;" />
            <col style="width: 10%;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<SteamMod, object>(x=>x.IsLocal)"></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<SteamMod, object>(x=>x.SteamID)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SteamMod, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SteamMod, object>(x=>x.Author.Name)">Author</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SteamMod, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<SteamMod, object>(x=>x.ActualSize)">Size</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel=""><MudLink Href="@context.Url" Target="_blank"><MudIcon Icon="@Icons.Custom.Brands.Steam"></MudIcon></MudLink></MudTd>
            <MudTd DataLabel="ID"><MudLink Href="@context.Url" Target="_blank">@context.SteamID</MudLink></MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Author">@context.Author?.Name</MudTd>
            <MudTd>
                <MudButtonGroup Variant="Variant.Outlined" Color=" MudBlazor.Color.Primary">
                    <MudTooltip Text="Get Infos from Steam">
                        <MudIconButton Color="MudBlazor.Color.Info" OnClick="() => GetModInfos(context)">
                            @switch (modContext[context.Id].GetStatus)
                            {
                                case QueryStatus.Progress:
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                    break;
                                case QueryStatus.Failed:
                                    <MudIcon Color="MudBlazor.Color.Error" Icon="@Icons.Material.Filled.Error" />
                                    break;
                                default:
                                    <MudIcon Icon="@Icons.Material.Filled.Update" />
                                    break;
                            }
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Update">
                        <MudIconButton Color="context.Status== ModStatus.UpToDate ? MudBlazor.Color.Success : MudBlazor.Color.Warning" OnClick="args => DownloadMod(context, args)">
                            @switch (modContext[context.Id].UpdateStatus)
                            {
                                case QueryStatus.Progress:
                                    <MudProgressCircular Size="Size.Small" Indeterminate="modContext[context.Id].UpdateProgress == 0" Value="modContext[context.Id].UpdateProgress" Maximum="100" />
                                    break;
                                case QueryStatus.Failed:
                                    <MudIcon Color="MudBlazor.Color.Error" Icon="@Icons.Material.Filled.Error" />
                                    break;
                                default:
                                    <MudIcon Icon="@Icons.Material.Filled.Download" />
                                    break;
                            }
                        </MudIconButton>
                    </MudTooltip>
                </MudButtonGroup>
                
            </MudTd>
            <MudTd DataLabel="Size">@context.Status</MudTd>
            <MudTd DataLabel="Size">@context.ActualSize</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>

    <MudTable Items="localMods" Hover="true" SortLabel="Sort By" Elevation="0">
        <ColGroup>
            <col style="width: 60px;" />
            <col />
            <col />
            <col style="width: 60px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Mod, object>(x=>x.IsLocal)"></MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Mod, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh>Path</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Mod, object>(x=>x.ActualSize)">Size</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel=""><MudIcon Icon="@Icons.Material.Filled.Folder"></MudIcon></MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="URL">@context.Path</MudTd>
            <MudTd DataLabel="Size">@context.ActualSize</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}


@code {
    private SteamMod[]? steamMods;
    private LocalMod[]? localMods;

    private Dictionary<Guid, ModContext> modContext = new();

    async Task GetModInfos(SteamMod mod)
    {
        modContext[mod.Id].GetStatus = QueryStatus.Progress;
        mod.Status = ModStatus.Progress;
        try
        {
            await SteamService.GetModInfo(mod.SteamID);
        }
        catch (Exception e)
        {
            modContext[mod.Id].GetStatus = QueryStatus.Failed;
            Snackbar.Add($"{e.GetType().Name} : {e.Message}", Severity.Error);
            StateHasChanged();
            await Task.Delay(5000);
        }
        finally
        { 
            modContext[mod.Id].GetStatus = QueryStatus.Success; 
            StateHasChanged(); 
        }
    }


    async Task DownloadMod(SteamMod mod, MouseEventArgs args)
    {
        modContext[mod.Id].UpdateStatus = QueryStatus.Progress;
        StateHasChanged();
        try
        {
            modContext[mod.Id].UpdateProgress = 0;
            StateHasChanged();

            await Task.Delay(2000);

            for (int i = 0; i < 100; i++)
            {
                await Task.Delay(100);
                modContext[mod.Id].UpdateProgress = i;
                StateHasChanged();
            }

            mod.Status = ModStatus.UpToDate;
            await ModsService.Save();

        }
        catch (Exception e)
        {
            modContext[mod.Id].UpdateStatus = QueryStatus.Failed;
            mod.Status = ModStatus.Error;
            await ModsService.Save();
            Snackbar.Add($"{e.GetType().Name} : {e.Message}", Severity.Error);
            StateHasChanged();
            await Task.Delay(5000);
        }
        finally
        { 
            modContext[mod.Id].UpdateStatus = QueryStatus.Success;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        steamMods = await ModsService.GetSteamModsAsync();
        localMods = await ModsService.GetLocalModsAsync();
        modContext.Clear();
        foreach (var mod in steamMods)
        { modContext.Add(mod.Id, new ModContext()); }
    }
}
