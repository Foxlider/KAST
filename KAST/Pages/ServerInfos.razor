@page "/serverinfos"

@using KAST.Core.Services
@implements IDisposable

@inject ServerInfoService ServerInfoService

    <MudGrid Spacing="2">
        <MudItem xs="6">
            <MudCard Elevation="25" Class="mud-width-full">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Center">CPU USAGE</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudChart ChartType="ChartType.Line" ChartSeries="@CpuSeries" Width="100%" ChartOptions="cpuOptions"></MudChart>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="6">
            <MudCard Elevation="25" Class="mud-width-full">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Center">RAM USAGE</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudChart ChartType="ChartType.Line" ChartSeries="@RamSeries" Width="100%" ChartOptions="ramOptions"></MudChart>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>





@code {
    private Timer? timer;

    private const int MaxData = 180;

    private readonly ChartOptions      cpuOptions = new();
    private readonly ChartSeries       cpuData    = new() { Name = "CPU", Data = new double[20] };
    private readonly List<ChartSeries> CpuSeries  = [];

    private readonly ChartOptions      ramOptions = new();
    private readonly ChartSeries       ramData    = new() { Name = "RAM", Data = new double[20] };
    private readonly List<ChartSeries> RamSeries  = [];

    protected override void OnInitialized()
    {
        cpuOptions.YAxisTicks = 10;
        cpuOptions.MaxNumYAxisTicks = 100;
        cpuOptions.DisableLegend = true;
        
        ramOptions.DisableLegend = true;
        ramOptions.YAxisFormat = "0 Mb";


        CpuSeries.Add(cpuData);
        RamSeries.Add(ramData);

        timer = new Timer(Callback, new AutoResetEvent(false), 100, 1000); // fire every second
    }
    
    private async void Callback(object? stateInfo)
    {
        var cpuVal = ServerInfoService.GetCpuUsage();
        // var cpuData = CpuSeries.First().Data;
        if (!float.IsNaN(cpuVal))
            CpuSeries.First().Data = CpuSeries.First().Data.Concat(new double[] { cpuVal }).ToArray(); // Why on EARTH do they use arrays ?
        if (CpuSeries.First().Data.Length > MaxData)
            CpuSeries.First().Data = CpuSeries.First().Data.Skip(1).ToArray();

        var ramVal = ServerInfoService.GetMemUsage();
        if (!float.IsNaN(ramVal))
            RamSeries.First().Data = RamSeries.First().Data.Concat(new double[] { ramVal }).ToArray();
        if (RamSeries.First().Data.Length > MaxData)
            RamSeries.First().Data = RamSeries.First().Data.Skip(1).ToArray();


        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    { timer?.Dispose(); }
}
