@page "/settings"
@using KAST.Components.Shared.Dialogs
@using KAST.Core.Services
@using KAST.Data.Models
@using KAST.Core.Extensions
@inject ConfigService ConfigService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Settings</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Settings</MudText>

<EditForm Model="@config" OnValidSubmit="SaveConfig">
    <div class="mb-3">
        <label>API Key</label>
        <MudInputString @bind-Value="config.ApiKey"
                        disabled="@config.IsEnvLocked(nameof(KastSettings.ApiKey))" />
    </div>

    <div class="mb-3">
        <label>Mod Folder Path</label>
        <MudTextField @bind-Value="config.ModFolderPath"
                      ReadOnly="true"
                      Disabled="@config.IsEnvLocked(nameof(KastSettings.ModFolderPath))" />
        <MudButton Disabled="@config.IsEnvLocked(nameof(KastSettings.ModFolderPath))"
                   OnClick="() => PickFolder(nameof(KastSettings.ModFolderPath))">
            Browse…
        </MudButton>
    </div>

    <div class="mb-3">
        <label>Server Folder Path</label>
        <MudTextField @bind-Value="config.ServerDefaultPath"
                      ReadOnly="true"
                      Disabled="@config.IsEnvLocked(nameof(KastSettings.ServerDefaultPath))" />
        <MudButton Disabled="@config.IsEnvLocked(nameof(KastSettings.ServerDefaultPath))"
                   OnClick="() => PickFolder(nameof(KastSettings.ServerDefaultPath))">
            Browse…
        </MudButton>
    </div>

    <div class="mb-3">
        <label>Theme Accent</label>
        <MudInputString @bind-Value="config.ThemeAccent"
                        disabled="@config.IsEnvLocked(nameof(KastSettings.ThemeAccent))" />
    </div>

    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
        Save
    </MudButton>
</EditForm>

@code {
    private KastSettings config = new();

    protected override async Task OnInitializedAsync()
    {
        config = await ConfigService.GetConfigAsync();
    }

    private async Task SaveConfig()
    {
        await ConfigService.UpdateConfigAsync(config);
        Snackbar.Add("Settings saved", Severity.Success);
    }

    private async Task PickFolder(string propertyName)
    {
        var dialog = await DialogService.ShowAsync<FolderPickerDialog>("Select Folder");
        var result = await dialog.Result;

        if (!result!.Canceled && result.Data is string folderPath)
        {
            var prop = typeof(KastSettings).GetProperty(propertyName);
            if (prop != null && prop.CanWrite)
                prop.SetValue(config, folderPath);
        }
    }
}
