@page "/server/{serverGuid:guid}"
@using KAST.Components.Shared
@inject InstanceManagerService InstanceService
@inject ITelemetryService Telemetry
<PageTitle>Server @server.Server.Name</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">@server.Server.Name</MudText>

<MudText Class="mb-4">@server.Server.Id</MudText>

<MudPaper Class="pa-4 ma-4" Elevation="4">
    <MudText Typo="Typo.h5">@server.Server.Name</MudText>

    <MudTabs>
        <MudTabPanel Text="Server Config" Icon="@Icons.Material.Filled.Settings">
            <ServerConfigPanel ServerCfg="server.ServerCfg"
            ServerCfgService="server.ServerCfgService" />
        </MudTabPanel>
        <MudTabPanel Text="Performance" Icon="@Icons.Material.Filled.Speed">
            <PerfConfigPanel PerfCfg="server.PerfCfg"
            PerfCfgService="server.PerfCfgService" />
            @* <MudText Class="ma-2" Typo="Typo.body1">
                Performance Tuning Options.
                <MudLink Href="https://community.bistudio.com/wiki/Arma_3:_Basic_Server_Config_File#Performance_Tuning_Options">Learn more</MudLink>
            </MudText>

            <MudGrid>

            </MudGrid>

            <MudDivider Class="my-4" />
            <MudExpansionPanel Text="Raw Config (server.cfg)" Expanded="true">
                <MudTextField T="string"
                Lines="10"
                FullWidth="true"
                Label="Raw Performance Config (perf.cfg)"
                @bind-Value="server.PerfCfgService.RawFileContent"
                Immediate="true" />
            </MudExpansionPanel> *@
        </MudTabPanel>

        <MudTabPanel Text="Missions" Icon="@Icons.Material.Filled.List">
            @* <MudText Class="ma-2" Typo="Typo.body1">Missions configuration.</MudText>
            <MudGrid>
                <ServerProfilePanel ServerProfile="server.ServerProfile"
                                    ServerProfileService="server.ServerProfileService" />
            </MudGrid>

            <MudDivider Class="my-4" />
            <MudTextField T="string"
            Label="Raw Config (mission.cfg)"
            Lines="20"
            FullWidth="true"
            @bind-Value="server.ServerProfileService.RawFileContent"
            Immediate="true" />
 *@
            <ServerProfilePanel ServerProfile="@server.ServerProfile"
            ServerProfileService="@server.ServerProfileService" />
        </MudTabPanel>



    </MudTabs>
</MudPaper>


@code {
    [Parameter]
    public Guid? ServerGuid { get; set; }

    ServerInstance server;

    protected override async Task OnParametersSetAsync()
    {
        using var activity = Telemetry.StartActivity("OnParametersSetAsync", this);
        server = InstanceService.Servers.FirstOrDefault(s => s.Server.Id == ServerGuid);

        if (server == null) return;

        activity?.AddTag("server_guid", server.Server.Id);

        server.PerfCfgService.OnUpdated += async() =>
        {
            using var activity = Telemetry.StartActivity("OnUpdated", this);
            activity?.AddTag("server_guid", server.Server.Id);
            activity?.AddTag("conf", "PerfCfgService");
            await InvokeAsync(StateHasChanged);
        };
        server.ServerCfgService.OnUpdated += async() =>
        {
            using var activity = Telemetry.StartActivity("OnUpdated", this);
            activity?.AddTag("server_guid", server.Server.Id);
            activity?.AddTag("conf", "ServerCfgService");
            await InvokeAsync(StateHasChanged);
        };
        server.ServerProfileService.OnUpdated += async() =>
        {
            using var activity = Telemetry.StartActivity("OnUpdated", this);
            activity?.AddTag("server_guid", server.Server.Id);
            activity?.AddTag("conf", "ServerProfileService");
            await InvokeAsync(StateHasChanged);
        };
    }
}
